import sbt._
import sbt.Keys._
import scoverage.ScoverageKeys.{
  coverageEnabled,
  coverageFailOnMinimum,
  coverageMinimum,
  coverageReport
}
import org.scalafmt.sbt.ScalafmtPlugin.autoImport.{scalafmtCheckAll, scalafmtConfig}

object Build {
  val versionScala = "2.13.4"

  val scalacFlags: Seq[String] = Seq(
    // Specify which backend to use.
    // In earliest versions it was specified as jvm-1.8
    "-target:jvm-1.8",
    // Emit warning and location for usages of deprecated APIs.
    "-deprecation",
    // Emit warning related to type erasure.
    "-unchecked",
    // Specify character encoding used by source files.
    "-encoding",
    "UTF-8",
    // Warn when a numeric is widened. Replaced by "-Wnumeric-widen"
    "-Ywarn-numeric-widen",
    // Warn when non-Unit expression results are unused. This is super useful in pattern matching.
    // Replaced by "-Wvalue-discard"
    "-Ywarn-value-discard",
    // Warn when dead code is identified. Replaced by "-Wdead-code"
    "-Ywarn-dead-code",
    // Warn about unused code. This includes (imports, privates, locals, params).
    // Replaced by: "-Wunused"
    "-Ywarn-unused:_",
    // Generate no assertions or assumptions.
    "-Xdisable-assertions",
    // Fail the compilation if there are any warnings.
    "-Xfatal-warnings",
    // Enable all warnings.
    "-Xlint:_",
    // Verify generic signatures in generated bytecode.
    "-Xverify",
    // Emit warning and location for usages of features that should be imported explicitly.
    "-feature",
    // Enable all language features (dynamics, existentials, higherKinds, implicitConversions,
    // postfixOps, reflectiveCalls, experimental.macros).
    "-language:implicitConversions",
    "-language:existentials",
    "-language:postfixOps",
    "-language:higherKinds"
  )

  private val basicSettings: Seq[Def.Setting[_]] = Seq(
    scalaVersion := versionScala,
    organization := "co.thebeat.bigdata",
    // set source files directory to be <base>/src
    sourceDirectory := new File(baseDirectory.value, "src"),
    // set compile files directory to be <base>/src/main
    Compile / sourceDirectory := sourceDirectory.value / "main",
    // set test files directory to be <base>/src/test
    Test / sourceDirectory := sourceDirectory.value / "test",
    // set scala, java and resources source files.
    // set the main Scala source directory to be <base>/src/main/scala
    Compile / scalaSource := (sourceDirectory in Compile).value / "scala",
    // set the Scala test source directory to be <base>/src/test/scala
    Test / scalaSource := (sourceDirectory in Test).value / "scala",
    // set the main Scala source directory to be <base>/src/main/java
    Compile / javaSource := (sourceDirectory in Compile).value / "java",
    // set the Scala test source directory to be <base>/src/test/java
    Test / javaSource := (sourceDirectory in Test).value / "java",
    // set the resource directory for compile scope
    Compile / resourceDirectory := (sourceDirectory in Compile).value / "resources",
    // set the resource directory for test scope
    Test / resourceDirectory := (sourceDirectory in Test).value / "resources",
    scalacOptions ++= scalacFlags
  )

  private val coverageSettings: Seq[Def.Setting[_]] = Seq(
    // Enable coverage and set minimum barrier for success.
    ThisBuild / coverageEnabled := true,
    coverageMinimum := 95,
    coverageFailOnMinimum := true,
    Test / test := (coverageReport dependsOn Test / test).value
  )

  private val styleSettings: Seq[Def.Setting[_]] = Seq(
    // Location of formatter configuration file.
    scalafmtConfig := file(".scalafmt.conf"),
    // Check format before compilation.
    Compile / compile := (Compile / compile dependsOn scalafmtCheckAll).value
  )

  val projectSettings: Seq[Def.Setting[_]] = Defaults.defaultConfigs
    .++(basicSettings)
    .++(styleSettings)
    .++(coverageSettings)
}
